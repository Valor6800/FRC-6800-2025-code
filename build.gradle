plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id "org.ysb33r.doxygen" version "2.0.0"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                                           // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true
// Enable DS but not by default
wpi.sim.addDriverstation()

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

doxygen  {
    sourceSets{ 
        main {
            group = 'Custom 6800 Tasks'
            option 'project_name', 'Valor 6800'
            option 'project_number', 1.0
            option 'project_logo', new File(projectDir,'favicon.ico')

            option 'generate_html', true
            option 'generate_latex', false
            option 'markdown_support', true
            option 'autolink_support', true
            option 'generate_treeview', true
            option 'source_tooltips', true
            option 'recursive', true
            option 'strip_code_comments', true
            option 'alphabetical_index', true
            option 'extension_mapping', 'inc=C++'
            option 'warn_if_undocumented', false
            option 'disable_index', false
            option 'full_sidebar', false
            option 'inherit_docs', true
            option 'html_extra_stylesheet', new File(projectDir,'doxygen-awesome-css/doxygen-awesome.css')
            option 'html_extra_files', new File(projectDir, 'favicon.ico')
                                    
            sources 'src/main/include'
            sources 'README.md'

            option 'use_mdfile_as_mainpage', 'README.md'

            outputDir 'docs/'
        }
    }
    
}

def wpiformatArgs = ['wpiformat', '-f', 'cpp', 'include', '-compile-commands', "${projectDir.getAbsolutePath()}/build/TargetedCompileCommands/linuxathenarelease", '-tidy-all', '-list-changed-files', '-vv']
task lint(type: Exec, dependsOn: "generateCompileCommands") {
    group = "Formatting"
    description = "Lints the src/main/cpp and src/main/include directories without modifying files"
    ignoreExitValue !project.hasProperty('ci')
    workingDir "src/main"
    commandLine *wpiformatArgs, '-no-format'
}
task format(type: Exec, dependsOn: "generateCompileCommands") {
    group = "Formatting"
    description = "Formats the src/main/cpp and src/main/include directories, with modifications"
    ignoreExitValue !project.hasProperty('ci')
    workingDir "src/main"
    commandLine wpiformatArgs
}